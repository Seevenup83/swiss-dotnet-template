@page "/examples/weather"
@attribute [StreamRendering]

<PageTitle>Counter</PageTitle>
<section class="section section--default">
  <div class="hero__content">
    <h1 class="hero__title">Weather</h1>
    <div class="hero__description">
        This component demonstrates showing data.
    </div>

    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="table-wrapper">
            <table class="table table--zebra table--caption">
                <caption>
                    Weather forecast for the next 5 days.
                </caption>
                <thead>
                    <tr>
                        <th scope="col">Date</th>
                        <th scope="col">Temp. (C)</th>
                        <th scope="col">Temp. (F)</th>
                        <th scope="col">Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <th scope="row">@forecast.Date.ToShortDateString()</th>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th scope="row">Total Days</th>
                        <td colspan="4" class="text-right">@forecasts.Length</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }

  </div>
</section>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
